#ifndef UIO_AXI_GPIO_H
#define UIO_AXI_GPIO_H

//==============================================================
// Derived from driver code generated by Vivado(TM) HLS 
// Version: 2014.4
// Copyright (C) 2014-2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/mman.h>

#ifdef __cplusplus
extern "C" {
#endif

#define MAX_UIO_PATH_SIZE       256
#define MAX_UIO_NAME_SIZE       64
#define MAX_UIO_MAPS            5
#define UIO_INVALID_ADDR        0

typedef uint32_t u32;

typedef struct {
    u32 baseaddr;
} axi_gpio;

typedef struct {
    u32 addr;
    u32 size;
} axi_gpio_uio_map;

typedef struct {
    int  uio_fd;
    int  uio_num;
    char name[MAX_UIO_NAME_SIZE];
    char version[MAX_UIO_NAME_SIZE];
    axi_gpio_uio_map maps[MAX_UIO_MAPS];
} axi_gpio_uio_info;

#define axi_gpio_write_reg(baseaddr, offset, data) \
    *(volatile u32*)((baseaddr) + (offset)) = (u32)(data)
#define axi_gpio_read_reg(baseaddr, offset) \
   *(volatile u32*)((baseaddr) + (offset))

int axi_gpio_init(axi_gpio *inst, const char* instnm);
int axi_gpio_release(axi_gpio *inst);

#ifdef __cplusplus
}
#endif

#endif
